{"version":3,"sources":["webpack:///./pages/reService/listings/media/listingImages.js?7802"],"names":["ListingImageSummary","state","ipfsHash","buffer","ethAddress","blockNumber","transactionHash","gasUsed","txReceipt","captureFile","event","stopPropagation","preventDefault","file","target","files","console","log","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","Buffer","from","result","setState","onClick","onSubmit","web3","eth","getTransactionReceipt","err","createMediaLink","props","propertyId","getAccounts","accounts","reService","REService","methods","uploadPropertyMedia","send","Router","pushRoute","address","message","ipfs","add","hash","sendHash","error","list","map","renderMedia","mediaURL","float","display","query","getPropertyMediaCount","call","listingsCount","Promise","all","Array","parseInt","fill","element","index","propertyMediaData","listings","filter"],"mappings":"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","file":"5.776fe5d03546f6412dc8.hot-update.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Button, Input, Image } from \"semantic-ui-react\";\nimport Layout from \"../../../../components/Layout\";\nimport REService from \"../../../../ethereum/reService\";\nimport ipfs from \"../../../../ethereum/ipfs\";\nimport web3 from \"../../../../ethereum/web3\";\n\nclass ListingImageSummary extends Component {\n  state = {\n    ipfsHash: null,\n    buffer: \"\",\n    ethAddress: \"\",\n    blockNumber: \"\",\n    transactionHash: \"\",\n    gasUsed: \"\",\n    txReceipt: \"\"\n  };\n\n  static async getInitialProps(props) {\n    const { address, propertyId } = props.query;\n    console.log(\"Address Is -> \" + address);\n    console.log(\"The Selected Property ID is ->\" + propertyId);\n    const reService = REService(address);\n\n    try {\n      const listingsCount = await reService.methods\n        .getPropertyMediaCount()\n        .call();\n\n      console.log(\"Total Image Count -> \" + listingsCount);\n      const listings = await Promise.all(\n        Array(parseInt(listingsCount))\n          .fill()\n\n          .map((element, index) => {\n            return reService.methods.propertyMediaData(index).call();\n          })\n      );\n\n      let list = listings.filter(list => {\n        //console.log(list.propertyId);\n        if (list.propertyId == propertyId) {\n          return list;\n        }\n      });\n\n      console.log(list);\n\n      //console.log(listings);\n      return {\n        list,\n        listingsCount,\n        address,\n        propertyId\n      };\n    } catch (err) {\n      console.log(\"Oops -> \" + err.message);\n    }\n  }\n\n  captureFile = event => {\n    event.stopPropagation();\n    event.preventDefault();\n    const file = event.target.files[0];\n\n    console.log(\"Got file\", file);\n\n    let reader = new window.FileReader();\n    reader.readAsArrayBuffer(file);\n    reader.onloadend = () => this.convertToBuffer(reader);\n  };\n  convertToBuffer = async reader => {\n    //file is converted to a buffer for upload to IPFS\n    const buffer = await Buffer.from(reader.result);\n    //set this buffer -using es6 syntax\n    this.setState({ buffer });\n    this.onClick();\n    this.onSubmit();\n  };\n\n  onClick = async () => {\n    try {\n      console.log(\"Entered OnClick\");\n      this.setState({ blockNumber: \"waiting..\" });\n      this.setState({ gasUsed: \"waiting...\" });\n      //get Transaction Receipt in console on click\n      //See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n      await web3.eth.getTransactionReceipt(\n        this.state.transactionHash,\n        (err, txReceipt) => {\n          console.log(err, txReceipt);\n          this.setState({ txReceipt });\n        }\n      ); //await for getTransactionReceipt\n      await this.setState({ blockNumber: this.state.txReceipt.blockNumber });\n      await this.setState({ gasUsed: this.state.txReceipt.gasUsed });\n    } catch (error) {\n      //try\n      console.log(error);\n    } //catch\n  }; //onClick\n  createMediaLink = async () => {\n    console.log(\"** The IPFS Hash is -> \" + this.state.ipfsHash);\n    console.log(\"** The Property ID is -> \" + this.props.propertyId);\n\n    const accounts = await web3.eth.getAccounts();\n    const reService = REService(this.state.ethAddress);\n    try {\n      await reService.methods\n        .uploadPropertyMedia(this.props.propertyId, this.state.ipfsHash)\n        .send({\n          from: accounts[0]\n        });\n      Router.pushRoute(\n        `/reService/${this.props.address}/listings/media/${\n          this.props.propertyId\n        }/listingImages`\n      );\n    } catch (err) {\n      console.log(\"Oops Error ... \" + err.message);\n    }\n  }; //createMediaLink\n  onSubmit = async event => {\n    //event.preventDefault();\n    //bring in user's metamask account address\n    const accounts = await web3.eth.getAccounts();\n\n    console.log(\"Sending from Metamask account: \" + accounts[0]);\n    console.log(\"Eth Address : \" + this.props.address);\n\n    //obtain contract address from storehash.js\n    const ethAddress = this.props.address;\n    this.setState({ ethAddress });\n    const reService = REService(ethAddress);\n    //save document to IPFS,return its hash#, and set hash# to state\n    //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add\n    await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n      console.log(err, ipfsHash);\n      //setState by setting ipfsHash to ipfsHash[0].hash\n      this.setState({ ipfsHash: ipfsHash[0].hash });\n      console.log(\"The IPFS Hash is -> \" + this.state.ipfsHash);\n      // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract\n      //return the transaction hash from the ethereum contract\n      //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n\n      reService.methods.sendHash(this.state.ipfsHash).send(\n        {\n          from: accounts[0]\n        },\n        (error, transactionHash) => {\n          console.log(\"The Transaction Hash is \" + transactionHash);\n          this.createMediaLink();\n          this.setState({ transactionHash });\n        }\n      ); //storehash\n    }); //await ipfs.add\n    // Store the ipfsHash in Block Chain\n  }; //onSubmit\n\n  renderMedia() {\n    return this.props.list.map(list => {\n      return (\n        <div class=\"ui medium images\">\n          {this.renderMedia()}\n          <img\n            class=\"ui image\"\n            src={`https://gateway.ipfs.io/ipfs/${list.mediaURL}`}\n          />\n        </div>\n      );\n    });\n  }\n  render() {\n    return (\n      <Layout>\n        <h3> Listing Image Summary </h3>\n\n        <Form onSubmit={this.onSubmit}>\n          <div>\n            <label for=\"file\" class=\"ui icon button\" style={{ float: \"right\" }}>\n              <i class=\"upload icon\" />\n              &nbsp;&nbsp;Upload Media\n            </label>\n            <input\n              type=\"file\"\n              id=\"file\"\n              onChange={this.captureFile}\n              style={{ display: \"none\" }}\n            />\n          </div>\n        </Form>\n      </Layout>\n    );\n  }\n}\nexport default ListingImageSummary;\n\n\n\n// WEBPACK FOOTER //\n// ./pages/reService/listings/media/listingImages.js"],"sourceRoot":""}